"""
Django settings for site_example project.

Generated by 'django-admin startproject' using Django 5.1.7.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

import os
from pathlib import Path
from urllib.parse import urljoin

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ["SECRET_KEY"]

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS: list[str] = [os.environ["ALLOWED_DOMAIN"]]


# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    # third party
    "corsheaders",
    "allauth",
    "allauth.account",
    "allauth.headless",
    "allauth.socialaccount",
    "allauth.socialaccount.providers.google",
    # local
    "authentication",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "corsheaders.middleware.CorsMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "allauth.account.middleware.AccountMiddleware",
]

ROOT_URLCONF = "site_example.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [os.path.join(BASE_DIR, "templates")],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ]
        },
    }
]

WSGI_APPLICATION = "site_example.wsgi.application"


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.postgresql",
        "NAME": os.environ["DB_NAME"],
        "USER": os.environ["DB_USER"],
        "PASSWORD": os.environ["DB_PASSWORD"],
        "HOST": os.environ["DB_HOST"],
        "PORT": os.environ["DB_PORT"],
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {"NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator"},
    {"NAME": "django.contrib.auth.password_validation.MinimumLengthValidator"},
    {"NAME": "django.contrib.auth.password_validation.CommonPasswordValidator"},
    {"NAME": "django.contrib.auth.password_validation.NumericPasswordValidator"},
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = "static/"

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"


# Authentication

AUTH_USER_MODEL = "authentication.User"

AUTHENTICATION_BACKENDS = ("allauth.account.auth_backends.AuthenticationBackend",)

LOGIN_URL = "/login/"

LOGIN_REDIRECT_URL = "/profile/"

# Sessions

# sets django-allauth's session token expiry date among other things
SESSION_COOKIE_AGE = 1209600  # 2 weeks, in seconds

SESSION_COOKIE_DOMAIN = os.environ["ALLOWED_DOMAIN"]


# Csrf

CSRF_TRUSTED_ORIGINS = [os.environ["ALLOWED_ORIGIN"]]

CSRF_COOKIE_DOMAIN = os.environ["ALLOWED_DOMAIN"]


# django-cors-headers

CORS_ALLOWED_ORIGINS = [os.environ["ALLOWED_ORIGIN"]]

CORS_ALLOW_CREDENTIALS = True


# django-allauth
# https://github.com/pennersr/django-allauth

ACCOUNT_EMAIL_VERIFICATION = "mandatory"

ACCOUNT_LOGIN_METHODS = {"email"}

ACCOUNT_LOGOUT_ON_PASSWORD_CHANGE = False

ACCOUNT_SIGNUP_FIELDS = ["email*", "password1*", "password2*"]

ACCOUNT_EMAIL_VERIFICATION_BY_CODE_ENABLED = True

ACCOUNT_EMAIL_VERIFICATION_BY_CODE_TIMEOUT = 900

ACCOUNT_EMAIL_UNKNOWN_ACCOUNTS = False

ACCOUNT_PASSWORD_RESET_BY_CODE_ENABLED = True

ACCOUNT_PASSWORD_RESET_BY_CODE_MAX_ATTEMPTS = 3

ACCOUNT_PASSWORD_RESET_BY_CODE_TIMEOUT = 180

ACCOUNT_LOGIN_ON_PASSWORD_RESET = True

SOCIALACCOUNT_EMAIL_AUTHENTICATION = True  # True only with trusted providers

SOCIALACCOUNT_EMAIL_AUTHENTICATION_AUTO_CONNECT = True

SOCIALACCOUNT_PROVIDERS = {
    "google": {
        "APP": {
            "client_id": os.environ["GOOGLE_CLIENT_ID"],
            "secret": os.environ["GOOGLE_CLIENT_SECRET"],
        },
        "SCOPE": ["profile", "email"],
        "AUTH_PARAMS": {"access_type": "online"},
    }
}

HEADLESS_ONLY = False

HEADLESS_FRONTEND_URLS = {
    "account_confirm_email": urljoin(os.environ["ALLOWED_ORIGIN"], "/verify-email/{key}"),
    "account_reset_password": urljoin(os.environ["ALLOWED_ORIGIN"], "/password/reset"),
    "account_reset_password_from_key": urljoin(
        os.environ["ALLOWED_ORIGIN"], "/password/reset/key/{key}"
    ),
    "account_signup": urljoin(os.environ["ALLOWED_ORIGIN"], "/signup"),
    "socialaccount_login_error": urljoin(os.environ["ALLOWED_ORIGIN"], "/provider/callback"),
}
HEADLESS_SERVE_SPECIFICATION = True

HEADLESS_SPECIFICATION_TEMPLATE_NAME = "headless/spec/swagger_cdn.html"


# Email

EMAIL_BACKEND = "django.core.mail.backends.smtp.EmailBackend"

EMAIL_USE_TLS = True

EMAIL_HOST = os.environ["EMAIL_HOST"]

EMAIL_HOST_USER = os.environ["EMAIL_CONTACT_USER"]

EMAIL_HOST_PASSWORD = os.environ["EMAIL_CONTACT_PASSWORD"]

EMAIL_PORT = os.environ["EMAIL_PORT"]
